/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.57
 * Generated at: 2020-09-02 08:26:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.test;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class testAjaxPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1598578468497L));
    _jspx_dependants.put("jar:file:/C:/dev/framework_workspace/second/src/main/webapp/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>second</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"/second/resources/js/jquery-3.5.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(function(){\r\n");
      out.write("\t//테스트 1 버튼을 클릭했을 때, 서버 컨트롤러 메소드로 값 보내기\r\n");
      out.write("\t$(\"#test1\").on(\"click\", function(){\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl : \"test1.do\",\r\n");
      out.write("\t\t\tdata : {name: $(\"#name\").val(), age: $(\"#age\").val()},\r\n");
      out.write("\t\t\ttype : \"post\",\r\n");
      out.write("\t\t\tsuccess: function(result){\r\n");
      out.write("\t\t\t\tif(result == \"ok\"){\r\n");
      out.write("\t\t\t\t\talert(\"값 보내기 성공!\");\r\n");
      out.write("\t\t\t\t\tconsole.log(\"result : \"+ result);\r\n");
      out.write("\t\t\t\t\t$(\"#d1\").html(\"<h5>\" + result + \"</h5>\");\r\n");
      out.write("\t\t\t\t}else { //'ok'가 아닌 다른 문자열 값이면\r\n");
      out.write("\t\t\t\t\talert(\"값 전송 실패!\");\r\n");
      out.write("\t\t\t\t\tconsole.log(\"result : \"+ result);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror : function(reqest, status, errorData){\r\n");
      out.write("\t\t\t\tconsole.log(\"error code : \" + request.status\r\n");
      out.write("\t\t\t\t\t\t+ \"\\nMessage : \" + request.responseText\r\n");
      out.write("\t\t\t\t\t\t+ \"\\nError : \" + errorData);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}); //ajax\r\n");
      out.write("\t}); //test1 click\r\n");
      out.write("\t\r\n");
      out.write("\t//테스트 2 버튼을 클릭하면, 서버 컨트롤러에서 전송한 json받아서 출력\r\n");
      out.write("\t$(\"#test2\").on(\"click\", function(){\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl: \"test2.do\",\r\n");
      out.write("\t\t\ttype : \"post\", //json을 받을 때는 post로 지정해야함\r\n");
      out.write("\t\t\tdataType : \"json\", //받는 값의 종류 지정(기본 : text)\r\n");
      out.write("\t\t\tsuccess : function(jsonData){\r\n");
      out.write("\t\t\t\t//json객체 한 개를 받았을 때는 바로 출력 처리할 수 있음\r\n");
      out.write("\t\t\t\tconsole.log(\"jsonData : \" + jsonData);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(\"#d2\").html(\"번호 : \" + jsonData.no + \r\n");
      out.write("\t\t\t\t\t\t\"<br>제목 : \" + jsonData.title + \r\n");
      out.write("\t\t\t\t\t\t\"<br>작성자 : \" + decodeURIComponent(jsonData.writer) + \r\n");
      out.write("\t\t\t\t\t\t\"<br>내용 : \" + decodeURIComponent(jsonData.content.replace(/\\+/gi, \" \")));\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror : function(reqest, status, errorData){\r\n");
      out.write("\t\t\t\tconsole.log(\"error code : \" + request.status\r\n");
      out.write("\t\t\t\t\t\t+ \"\\nMessage : \" + request.responseText\r\n");
      out.write("\t\t\t\t\t\t+ \"\\nError : \" + errorData);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}); //ajax\r\n");
      out.write("\t}); //test2 click\r\n");
      out.write("\t\r\n");
      out.write("\t//테스트 3 버튼을 클릭하면, 서버 컨트롤러에서 전송한 json배열 받아서 출력\r\n");
      out.write("\t$(\"#test3\").on(\"click\", function(){\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl : \"test3.do\",\r\n");
      out.write("\t\t\ttype : \"post\",\r\n");
      out.write("\t\t\tdataType : \"json\",\r\n");
      out.write("\t\t\tsuccess : function(obj){\r\n");
      out.write("\t\t\t\t//json배열을 가진 객체를 받은 경우\r\n");
      out.write("\t\t\t\t//object ==> String ==> parsing : json\r\n");
      out.write("\t\t\t\tconsole.log(obj); //object\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//리턴된 객체를 문자열로 변환 처리\r\n");
      out.write("\t\t\t\tvar objStr = JSON.stringify(obj);\r\n");
      out.write("\t\t\t\t//객체문자열을 다시 json객체로 바꿈\r\n");
      out.write("\t\t\t\tvar jsonObj = JSON.parse(objStr);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//출력용 문자열 준비\r\n");
      out.write("\t\t\t\tvar output = $(\"#d3\").html();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//출력용 문자열 만들기\r\n");
      out.write("\t\t\t\tfor(var i in jsonObj.list) {\r\n");
      out.write("\t\t\t\t\toutput += jsonObj.list[i].userid\r\n");
      out.write("\t\t\t\t\t\t+ \", \" + jsonObj.list[i].userpwd\r\n");
      out.write("\t\t\t\t\t\t+ \", \" + decodeURIComponent(jsonObj.list[i].username.replace(/\\+/gi, \" \"))\r\n");
      out.write("\t\t\t\t\t\t+ \", \" + jsonObj.list[i].age\r\n");
      out.write("\t\t\t\t\t\t+ \", \" + jsonObj.list[i].email\r\n");
      out.write("\t\t\t\t\t\t+ \", \" + jsonObj.list[i].phone\r\n");
      out.write("\t\t\t\t\t\t+ \", \" + jsonObj.list[i].birth\r\n");
      out.write("\t\t\t\t\t\t+ \"<br>\"\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(\"#d3\").html(output);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror : function(reqest, status, errorData){\r\n");
      out.write("\t\t\t\tconsole.log(\"error code : \" + request.status\r\n");
      out.write("\t\t\t\t\t\t+ \"\\nMessage : \" + request.responseText\r\n");
      out.write("\t\t\t\t\t\t+ \"\\nError : \" + errorData);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});//ajax\r\n");
      out.write("\t}); //test3 click\r\n");
      out.write("\t\r\n");
      out.write("\t//테스트 4 버튼을 클릭하면, 서버 컨트롤러에서 전송한 Map객체를 받아서 출력\r\n");
      out.write("\t$(\"#test4\").on(\"click\", function(){\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl: \"test4.do\",\r\n");
      out.write("\t\t\ttype : \"post\",\r\n");
      out.write("\t\t\tdataType : \"json\",\r\n");
      out.write("\t\t\tsuccess : function(jsonObj){\r\n");
      out.write("\t\t\t\tconsole.log(jsonObj);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(\"#d4\").html(\"받은 Map 안의 객체 정보 확인<br>\"\r\n");
      out.write("\t\t\t\t\t\t+ \"이름 : \" + decodeURIComponent(jsonObj.hashMap.samp.name).replace(/\\+/gi, \" \")\r\n");
      out.write("\t\t\t\t\t\t+ \", 나이 : \" + jsonObj.hashMap.samp.age);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror : function(reqest, status, errorData){\r\n");
      out.write("\t\t\t\tconsole.log(\"error code : \" + request.status\r\n");
      out.write("\t\t\t\t\t\t+ \"\\nMessage : \" + request.responseText\r\n");
      out.write("\t\t\t\t\t\t+ \"\\nError : \" + errorData);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}); //ajax\r\n");
      out.write("\t}); //test4 click\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#test5\").on(\"click\", function(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t}); //test5 click\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#test6\").on(\"click\", function(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t}); //test6 click\r\n");
      out.write("\t\r\n");
      out.write("}); //document.ready\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      if (_jspx_meth_c_005fimport_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("<hr>\r\n");
      out.write("<h1>spring second : Ajax test page</h1>\r\n");
      out.write("<ol>\r\n");
      out.write("<li>서버쪽 컨트롤러 메소드로 값 보내기 <button id=\"test1\">테스트 1</button></li>\r\n");
      out.write("이름 입력 : <input type=\"text\" id=\"name\"> <br>\r\n");
      out.write("나이 입력 : <input type=\"number\" id=\"age\">\r\n");
      out.write("<p><div id=\"d1\"></div></p>\r\n");
      out.write("<li>컨트롤러에서 보낸 json 객체 받아서 출력하기 <button id=\"test2\">테스트 2</button></li>\r\n");
      out.write("<p><div id=\"d2\"></div></p>\r\n");
      out.write("<li>컨트롤러에서 보낸 json 배열 받아서 출력하기 <button id=\"test3\">테스트 3</button></li>\r\n");
      out.write("<p><div id=\"d3\"></div></p>\r\n");
      out.write("<li>컨트롤러에서 보낸 Map 객체 받아서 출력하기 <button id=\"test4\">테스트 4</button></li>\r\n");
      out.write("<p><div id=\"d4\"></div></p>\r\n");
      out.write("<li>컨트롤러로 json 객체 보내기 <button id=\"test5\">테스트 5</button></li>\r\n");
      out.write("<p><div id=\"d5\"></div></p>\r\n");
      out.write("<li>컨트롤러로 json 배열 보내기 <button id=\"test6\">테스트 6</button></li>\r\n");
      out.write("<p><div id=\"d6\"></div></p>\r\n");
      out.write("</ol>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      if (_jspx_meth_c_005fimport_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fimport_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:import
    org.apache.taglibs.standard.tag.rt.core.ImportTag _jspx_th_c_005fimport_005f0 = (org.apache.taglibs.standard.tag.rt.core.ImportTag) _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.ImportTag.class);
    boolean _jspx_th_c_005fimport_005f0_reused = false;
    try {
      _jspx_th_c_005fimport_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fimport_005f0.setParent(null);
      // /WEB-INF/views/test/testAjaxPage.jsp(133,0) name = url type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fimport_005f0.setUrl("/WEB-INF/views/common/header.jsp");
      int[] _jspx_push_body_count_c_005fimport_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fimport_005f0 = _jspx_th_c_005fimport_005f0.doStartTag();
        if (_jspx_th_c_005fimport_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fimport_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fimport_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fimport_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody.reuse(_jspx_th_c_005fimport_005f0);
      _jspx_th_c_005fimport_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fimport_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fimport_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fimport_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:import
    org.apache.taglibs.standard.tag.rt.core.ImportTag _jspx_th_c_005fimport_005f1 = (org.apache.taglibs.standard.tag.rt.core.ImportTag) _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.ImportTag.class);
    boolean _jspx_th_c_005fimport_005f1_reused = false;
    try {
      _jspx_th_c_005fimport_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fimport_005f1.setParent(null);
      // /WEB-INF/views/test/testAjaxPage.jsp(154,0) name = url type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fimport_005f1.setUrl("/WEB-INF/views/common/footer.jsp");
      int[] _jspx_push_body_count_c_005fimport_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fimport_005f1 = _jspx_th_c_005fimport_005f1.doStartTag();
        if (_jspx_th_c_005fimport_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fimport_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fimport_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fimport_005f1.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody.reuse(_jspx_th_c_005fimport_005f1);
      _jspx_th_c_005fimport_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fimport_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fimport_005f1_reused);
    }
    return false;
  }
}
